// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// PRODUCTION //
// datasource db {
//   provider          = "postgresql"
//   url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//   shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
// }

// DEVELOPMENT //
datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model User {
  id              String           @id @default(cuid())
  name            String?
  username        String?          @unique
  bio             String?
  role            Role             @default(USER)
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  sessions        Session[]
  ActivationToken ActivationToken?
  // Calendar        Calendar[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expires    DateTime

  @@unique([identifier, token])
}

model ActivationToken {
  id          String    @id @default(cuid())
  userId      String    @unique
  token       String    @unique @default(cuid())
  validated   Boolean   @default(false)
  validatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expires     DateTime
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
